package com.mkw.core.service.impl;

import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mkw.core.common.SuperServiceImpl;
import com.mkw.core.entity.FoodGroup;
import com.mkw.core.mapper.FoodGroupMapper;
import com.mkw.core.service.FoodGroupService;
import com.mkw.plugins.DataInfo;
import com.mkw.plugins.PageInfo;

/**
 * <p>
 * 菜品组表 服务实现类
 * </p>
 *
 * @author xiaojiayi
 * @since 2018-09-06
 */
@Service
@Transactional
public class FoodGroupServiceImpl extends SuperServiceImpl<FoodGroupMapper, FoodGroup> implements FoodGroupService {
	
	@Override
	public DataInfo addModel(DataInfo dataInfo, String authorId) throws Exception {
		if (StringUtils.isNotBlank(authorId)) {
	     FoodGroup foodgroup = dataInfo.getRequestData().toJavaObject(FoodGroup.class);
			
			List<FoodGroup> list = selectList(foodgroup);
			if (null != list && 0 < list.size()) {
				return fail(dataInfo, ERROR_ROOM_NAME);
			}
			insert(foodgroup, authorId);
			return success(dataInfo, null);
		}
		return fail(dataInfo, SESSION_IS_EXCEPTION);
	}

	@Override
	public DataInfo editModelById(DataInfo dataInfo, String authorId) throws Exception {
		if (StringUtils.isNotBlank(authorId)) {
			FoodGroup foodgroup = dataInfo.getRequestData().toJavaObject(FoodGroup.class);
			
        FoodGroup tempfoodgroup = new FoodGroup();
        tempfoodgroup.setGroupName(foodgroup.getGroupName());
			List<FoodGroup> list = selectList(tempfoodgroup);
			if (null != list && 0 < list.size()) {
				if (1 == list.size() && list.get(0).getId().equals(foodgroup.getId())) {
					// 自己
				} else {
					return fail(dataInfo, ERROR_ROOM_NAME);
				}
			}
			update(foodgroup, authorId);
			return success(dataInfo, null);
		}
		return fail(dataInfo, SESSION_IS_EXCEPTION);
	}

	@Override
	public DataInfo remoteModelById(DataInfo dataInfo, String authorId) throws Exception {
		if (StringUtils.isNotBlank(authorId)) {
			String fid=dataInfo.getRequestData().getString("id");
			Integer id=Integer.parseInt(fid);
			mapper.deleteById(id);
			return success(dataInfo, null);
		}
		return fail(dataInfo, SESSION_IS_EXCEPTION);
	}

	@Override
	public DataInfo editStatusById(DataInfo dataInfo, String authorId) throws Exception {
		if (StringUtils.isNotBlank(authorId)) {
			FoodGroup foodGroup = dataInfo.getRequestData().toJavaObject(FoodGroup.class);
			
			FoodGroup tempfoodGroup = new FoodGroup();
			tempfoodGroup.setGroupName(foodGroup.getGroupName());
			List<FoodGroup> list = selectList(tempfoodGroup);
			if (null != list && 0 < list.size()) {
				if (1 == list.size() && list.get(0).getId().equals(foodGroup.getId())) {
					// 自己
				} else {
					return fail(dataInfo, ERROR_ROOM_NAME);
				}
			}
			
			update(foodGroup, authorId);			
			return success(dataInfo, null);
		}
		return fail(dataInfo, SESSION_IS_EXCEPTION);
	}

	@Override
	public DataInfo findModelById(DataInfo dataInfo) throws Exception {
		String id = dataInfo.getRequestData().getString("id");
		return success(dataInfo, select(id));
	}

	@Override
	public DataInfo findListByModel(DataInfo dataInfo) throws Exception {
		FoodGroup foodgroup = dataInfo.getRequestData().toJavaObject(FoodGroup.class);
		List<FoodGroup> selectList = selectList(foodgroup);
		return success(dataInfo, selectList);
	}

	@Override
	public PageInfo findListByPage(PageInfo pageInfo) throws Exception {
		pageInfo.setData(mapper.queryByPageData(pageInfo));
		pageInfo.setCount(mapper.queryByPageCount(pageInfo));
		return pageInfo;
	}
}
